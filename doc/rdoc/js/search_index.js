var search_data = {"index":{"searchIndex":["alexaservice","applicationrecord","conditionintentbuilder","createsymptomlogentries","createsymptomlogs","createsymptoms","createusers","everybodyhurtsintentbuilder","helpintentbuilder","installaudited","intentbuilder","jsoninteractionmodel","sinatra","fibro","helpers","startoverintentbuilder","symptom","symptominfointentbuilder","symptomintentbuilder","symptomlog","symptomlogentry","user","utterancesmodel","==()","add()","add()","add()","add()","add()","add()","add()","add()","add_indexes()","add_indexes_and_keys()","add_indexes_and_keys()","add_indexes_and_keys()","add_indexes_and_keys()","add_slot()","authenticate()","build_response()","cancel_response()","change()","change()","change()","change()","change()","count()","describe()","end_session_response()","help_response()","launch_response()","new()","new()","new()","new()","registered()","schema()","start_over_response()","stop_response()","to_s()","to_s()","to_s()","to_s()","readme","app.rake","bootstrap.rake","db.rake","generate.rake","metrics.rake","sdoc.rake"],"longSearchIndex":["alexaservice","applicationrecord","conditionintentbuilder","createsymptomlogentries","createsymptomlogs","createsymptoms","createusers","everybodyhurtsintentbuilder","helpintentbuilder","installaudited","intentbuilder","jsoninteractionmodel","sinatra","sinatra::fibro","sinatra::fibro::helpers","startoverintentbuilder","symptom","symptominfointentbuilder","symptomintentbuilder","symptomlog","symptomlogentry","user","utterancesmodel","applicationrecord#==()","conditionintentbuilder#add()","everybodyhurtsintentbuilder#add()","helpintentbuilder#add()","intentbuilder#add()","startoverintentbuilder#add()","symptominfointentbuilder#add()","symptomintentbuilder#add()","symptomlog#add()","installaudited#add_indexes()","createsymptomlogentries#add_indexes_and_keys()","createsymptomlogs#add_indexes_and_keys()","createsymptoms#add_indexes_and_keys()","createusers#add_indexes_and_keys()","intentbuilder#add_slot()","user::authenticate()","sinatra::fibro::helpers#build_response()","alexaservice#cancel_response()","createsymptomlogentries#change()","createsymptomlogs#change()","createsymptoms#change()","createusers#change()","installaudited#change()","symptomlog#count()","utterancesmodel#describe()","alexaservice#end_session_response()","alexaservice#help_response()","alexaservice#launch_response()","alexaservice::new()","intentbuilder::new()","jsoninteractionmodel::new()","utterancesmodel::new()","sinatra::fibro::registered()","jsoninteractionmodel#schema()","alexaservice#start_over_response()","alexaservice#stop_response()","symptom#to_s()","symptomlog#to_s()","symptomlogentry#to_s()","user#to_s()","","","","","","",""],"info":[["AlexaService","","classes/AlexaService.html","","<p>Class to define Alexa&#39;s intent behavior\n"],["ApplicationRecord","","classes/ApplicationRecord.html","","<p>Abstract class to hold common methods for application models\n"],["ConditionIntentBuilder","","classes/ConditionIntentBuilder.html","","<p>Class to build Condition Intent\n"],["CreateSymptomLogEntries","","classes/CreateSymptomLogEntries.html","","<p>Migration to create symptom log entries table\n"],["CreateSymptomLogs","","classes/CreateSymptomLogs.html","","<p>Migration to create symptom log table\n"],["CreateSymptoms","","classes/CreateSymptoms.html","","<p>Migration to create symptoms table\n"],["CreateUsers","","classes/CreateUsers.html","","<p>Migration to create users table\n"],["EverybodyHurtsIntentBuilder","","classes/EverybodyHurtsIntentBuilder.html","","<p>Class to build utterances for playing &#39;Everybody Hurts&#39; by REM\n"],["HelpIntentBuilder","","classes/HelpIntentBuilder.html","","<p>Class to build utterances for Help Intent\n"],["InstallAudited","","classes/InstallAudited.html","","<p>Stores audit information using audited gem\n"],["IntentBuilder","","classes/IntentBuilder.html","","<p>Abstract class to build custom intents\n"],["JsonInteractionModel","","classes/JsonInteractionModel.html","","<p>Class to generate JSON Interaction Model\n"],["Sinatra","","classes/Sinatra.html","","<p>Namespace under Sinatra\n"],["Sinatra::Fibro","","classes/Sinatra/Fibro.html","","<p>Main entry point for Alexa request\n"],["Sinatra::Fibro::Helpers","","classes/Sinatra/Fibro/Helpers.html","","<p>Helpers\n"],["StartOverIntentBuilder","","classes/StartOverIntentBuilder.html","","<p>Class to build utterances for Start over Intent\n"],["Symptom","","classes/Symptom.html","","<p>Represents a Symptom\n"],["SymptomInfoIntentBuilder","","classes/SymptomInfoIntentBuilder.html","","<p>Class to build Symptom Information Intent\n"],["SymptomIntentBuilder","","classes/SymptomIntentBuilder.html","","<p>Class to build Symptom Intent\n"],["SymptomLog","","classes/SymptomLog.html","","<p>Represents a Symptom Log\n"],["SymptomLogEntry","","classes/SymptomLogEntry.html","","<p>Represents a Symptom log Entry\n"],["User","","classes/User.html","","<p>Represents an application user/respondent\nUsers are linked to Alexa users\nusing Alexa session request.user_id ...\n"],["UtterancesModel","","classes/UtterancesModel.html","","<p>Class to generate sample utterances file\n"],["==","ApplicationRecord","classes/ApplicationRecord.html#method-i-3D-3D","(other)","<p>Redefine equality for application records\nRather than just checking for\nequal IDs, check that all attributes ...\n"],["add","ConditionIntentBuilder","classes/ConditionIntentBuilder.html#method-i-add","()",""],["add","EverybodyHurtsIntentBuilder","classes/EverybodyHurtsIntentBuilder.html#method-i-add","()",""],["add","HelpIntentBuilder","classes/HelpIntentBuilder.html#method-i-add","()",""],["add","IntentBuilder","classes/IntentBuilder.html#method-i-add","()",""],["add","StartOverIntentBuilder","classes/StartOverIntentBuilder.html#method-i-add","()",""],["add","SymptomInfoIntentBuilder","classes/SymptomInfoIntentBuilder.html#method-i-add","()",""],["add","SymptomIntentBuilder","classes/SymptomIntentBuilder.html#method-i-add","()",""],["add","SymptomLog","classes/SymptomLog.html#method-i-add","(entry)",""],["add_indexes","InstallAudited","classes/InstallAudited.html#method-i-add_indexes","()",""],["add_indexes_and_keys","CreateSymptomLogEntries","classes/CreateSymptomLogEntries.html#method-i-add_indexes_and_keys","()",""],["add_indexes_and_keys","CreateSymptomLogs","classes/CreateSymptomLogs.html#method-i-add_indexes_and_keys","()",""],["add_indexes_and_keys","CreateSymptoms","classes/CreateSymptoms.html#method-i-add_indexes_and_keys","()",""],["add_indexes_and_keys","CreateUsers","classes/CreateUsers.html#method-i-add_indexes_and_keys","()",""],["add_slot","IntentBuilder","classes/IntentBuilder.html#method-i-add_slot","(name, type, &block)",""],["authenticate","User","classes/User.html#method-c-authenticate","(user_id)",""],["build_response","Sinatra::Fibro::Helpers","classes/Sinatra/Fibro/Helpers.html#method-i-build_response","(echo_request, response)",""],["cancel_response","AlexaService","classes/AlexaService.html#method-i-cancel_response","()",""],["change","CreateSymptomLogEntries","classes/CreateSymptomLogEntries.html#method-i-change","()",""],["change","CreateSymptomLogs","classes/CreateSymptomLogs.html#method-i-change","()",""],["change","CreateSymptoms","classes/CreateSymptoms.html#method-i-change","()",""],["change","CreateUsers","classes/CreateUsers.html#method-i-change","()",""],["change","InstallAudited","classes/InstallAudited.html#method-i-change","()",""],["count","SymptomLog","classes/SymptomLog.html#method-i-count","()",""],["describe","UtterancesModel","classes/UtterancesModel.html#method-i-describe","()",""],["end_session_response","AlexaService","classes/AlexaService.html#method-i-end_session_response","()",""],["help_response","AlexaService","classes/AlexaService.html#method-i-help_response","()",""],["launch_response","AlexaService","classes/AlexaService.html#method-i-launch_response","()",""],["new","AlexaService","classes/AlexaService.html#method-c-new","(user, response)",""],["new","IntentBuilder","classes/IntentBuilder.html#method-c-new","(intent)",""],["new","JsonInteractionModel","classes/JsonInteractionModel.html#method-c-new","(model)",""],["new","UtterancesModel","classes/UtterancesModel.html#method-c-new","(model)",""],["registered","Sinatra::Fibro","classes/Sinatra/Fibro.html#method-c-registered","(app)",""],["schema","JsonInteractionModel","classes/JsonInteractionModel.html#method-i-schema","()",""],["start_over_response","AlexaService","classes/AlexaService.html#method-i-start_over_response","()",""],["stop_response","AlexaService","classes/AlexaService.html#method-i-stop_response","()",""],["to_s","Symptom","classes/Symptom.html#method-i-to_s","()",""],["to_s","SymptomLog","classes/SymptomLog.html#method-i-to_s","()",""],["to_s","SymptomLogEntry","classes/SymptomLogEntry.html#method-i-to_s","()",""],["to_s","User","classes/User.html#method-i-to_s","()",""],["README","","files/README_md.html","","<p>Mental Test\n<p><img src=\"https://travis-ci.org/stevenbeales/fibro.png\">\n<p><img\nsrc=\"https://api.codeclimate.com/v1/badges/6574b93819edbc0cff7d/maintainability\">\n…\n"],["app.rake","","files/lib/tasks/app_rake.html","","<p># frozen_string_literal: true\n<p>namespace :app do\n\n<pre><code>desc &#39;Run development web server&#39;\ntask :run do\n  sh %( ...\n</code></pre>\n"],["bootstrap.rake","","files/lib/tasks/bootstrap_rake.html","","<p># frozen_string_literal: true\n<p>desc &#39;Get the application set up for development&#39;\n<p>task bootstrap: …\n"],["db.rake","","files/lib/tasks/db_rake.html","","<p># frozen_string_literal: true\n<p>namespace :db do\n\n<pre><code>desc &#39;Drop, create, migrate then seed the development database&#39; ...\n</code></pre>\n"],["generate.rake","","files/lib/tasks/generate_rake.html","","<p># frozen_string_literal: true\n<p>desc &#39;Generate a new project at dir=foo&#39; task :generate do\n\n<pre><code># Create ...\n</code></pre>\n"],["metrics.rake","","files/lib/tasks/metrics_rake.html","","<p># frozen_string_literal: true\n<p>namespace :metrics do\n\n<pre><code>desc &#39;generate line counts for each module&#39;\ntask :lines ...\n</code></pre>\n"],["sdoc.rake","","files/lib/tasks/sdoc_rake.html","","<p># frozen_string_literal: true\n<p># Rakefile require &#39;sdoc&#39; # and use your RDoc task the same way …\n"]]}}