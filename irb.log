i.pages[0]["elements"]
i.pages[0]["elements"]
i.pages[0]["elements"]
i.pages[0]
quit
i = Instrument.first
i = Instrument.first
exit
i = Instrument.first
i.items
i.pages
i.pages[0]
i.pages[0]quit
quit
quit
i = Instrument.first
i.items
quit
i = Instrument.first
i.items
pages[0]
i.pages[0]
i.pages[0]["elements"]
i = Instrument.first
i.items
i = Instrument.first
i.items
quit
i = Instrument.first
i.items
quit
i = Instrument.first
i.items
quit
i = Instrument.first
i.items
quit
i = Instrument.first
i.items
exit
i = Instrument.first
i.items
quit
Instrument.all
quit
exit
exit
Instrument.all
Instrument.list_tests
require 'yaml'
require 'active_record'
dbconfig = YAML.safe_load(File.read('config/database.yml'))
ActiveRecord::Base.establish_connection dbconfig[ENV['RACK_ENV']]
ActiveRecord::Base.establish_connection dbconfig['test']
Instrument.all
Instrument.list_tests
 tests = Instrument.all
    testnames = ''
    tests.each {|t| testnames + t.name + ' '}
testnames
    tests.each do 
 |t| testnames + t.name + ' '
  end
testnames
Instrument.first.name
" + Instrument.first.name + ' '
'' + Instrument.first.name + ' '
/
"
'' + Instrument.first.name + ' '
'' + Instrument.first.name + ' '
Instrument.list_tests
Instrument.list_tests
exit
['RACK_ENV'] = test
['RACK_ENV'] = 'test'
exit
USer.authenticate('blah')
require './models/init'
User.authenticate('blah')
require '.config/db'
require './config/db'
User.authenticate('blah')
exit
('a'..'z').to_a.shuffle[0,8].join
require './models/init'
require './config/db'
User.Authenticate("dcjnwbou")
User.suthenticate("dcjnwbou")
User.authenticate("dcjnwbou")
\q
exit

require './models/init'
require './config/db'
User.authenticate("dcjnwbou")
User.new
User.authenticate("dcjnwbou")
User.authenticate("dcjnwbou")
require './config/db'
require './models/init'
user = User.new(username: 'Timmy', access_token: 'AccessToken')
user.save
User.last
persisted_user = User.last
persisted_user.username
persisted_user.username
quit
require .config/db
require '.config/db'
require './config/db'
require './models/init'
Survey.all
quir
quit
require './models/init'
require './config/db'
require './models/init'
quit
RACK_ENV=test
RACK_ENV=test
ENV['RACK_ENV'] = 'test'
require './models/init'
require './config/db'
require './models/init'
Surevy.all
Survey.all
Survey.all.join ' '
Survey.list_tests
quir
quit
quit
Ralyxa.inspect
Ralyxa.Configuration.inspect
Ralyxa::Configuration.inspect
Ralyxa::ReigsterIntents.inspect
Ralyxa::RegisterIntents.inspect
Ralyxa::RegisterIntents.class.inspect
Ralyxa::RegisterIntents.class.inspect
app.inspect
App.inspect
intent.inspect
  Ralyxa::Skill.inspect
  Ralyxa::Skill.instance.inspect
  Ralyxa::Skill.new.inspect
quit
ruby -v
quit
Sinatra::MyApp.new
require app.rb
require./ app.rb
require./app.rb
require 'app'
require ',/app'
require './app'
quit
require './app'
Sinatra::MyApp.inspect
Sinatra::MyApp.new
Sinatra::MyApp.new.inspect
ap = Sinatra::MyApp.new
ap.inspect
ap
ap.methods
ap.public_methods
ap.helpers
ap.helpers.count
ap.inspect
ap.instance_values
ap.instance_values[:echo_request]
ap
ap.public_methods
ap.pp
ap.pretty_print
ap.pretty_print_inspect
ap.to_s
ap.to_yaml
ap.to_json
ap.to_yaml
quit
File.write('./test.yaml', Sinatra::MyApp.new.to_yaml)
require './app'
File.write('./test.yaml', Sinatra::MyApp.new.to_yaml)
File.write('./test.json', Sinatra::MyApp.new.to_json)
exit
require '.app'
require './app'
ap = Sinatra::MyApp.new
ap = Sinatra::MyApp.new {include Sinatra::Fibro::Helpers}
ap.punblic_methods
ap.public_methods
require './app/speech_assets/init'
ap.build_response
ap.build_response(AlexaWebService.new)
ap.build_response(AlexaWebService::Response.new)
requirequire 'alexa_web_service'
require 'alexa_web_service'
ap.build_response(AlexaWebService::Response.new)
ap.build_response(::AlexaWebService::Response.new)
quit

exit